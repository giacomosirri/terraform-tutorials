# This is the main GitHub Actions workflow, which gets run every time 
# a pull request is opened or edited, or a commit is pushed to the main.
name: Main workflow

on:
  workflow_dispatch:
  push:
  pull_request:
    types: [opened, edited, synchronize]
    branches:
      - main

jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      cloud-provider: ${{ steps.read-json.outputs.cloud-provider }}
      module: ${{ steps.read-json.outputs.module }}
    steps:
      - uses: actions/checkout@v2

      # Extract cloud provider and Terraform module information from the
      # JSON configuration file.
      - name: Read JSON and set outputs
        id: read-json
        run: |
          json_file="./config.json"
          cloud_provider=$(jq -r '.cloud_provider' $json_file)
          module=$(jq -r '.module' $json_file)
          if [ "$cloud_provider" == "aws" ] || [ "$cloud_provider" == "azure" ]; then
            echo "cloud-provider=`echo $cloud_provider`" >> "$GITHUB_OUTPUT"
            echo "module=$(echo $module)" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: cloud provider '$cloud_provider' is not recognized." >&2
            exit 1
          fi

  terraform-plan:
    # Execute only when a pull request gets opened, edited or synchronized.
    if: ${{ github.event_name == 'pull_request' }}
    needs: read-config
    uses: ./.github/workflows/terraform-plan.yml
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    with:
      cloud-provider: ${{ needs.read-config.outputs.cloud-provider }}
      module: ${{ needs.read-config.outputs.module }}
    secrets: inherit

  terraform-apply:
    # Execute when a pull request gets merged into the main, or when manually requested.
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch' }}
    needs: read-config
    uses: ./.github/workflows/terraform-apply.yml
    permissions:
      id-token: write
      contents: read
    with:
      cloud-provider: ${{ needs.read-config.outputs.cloud-provider }}
      module: ${{ needs.read-config.outputs.module }}
    secrets: inherit
