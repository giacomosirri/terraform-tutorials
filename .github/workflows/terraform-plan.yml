name: Terraform plan workflow

on:
  workflow_dispatch:
  pull_request:
    types: [opened, edited]
    branches:
      - main
  push:
    branches-ignore:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Azure login
        uses: azure/login@v1 
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
      
      - name: Select module from configuration file
        id: select-module
        run: echo "MODULE=`cat configuration.txt`" >> "$GITHUB_OUTPUT"

      # Without setting the following environment variables, Terraform would try
      # to build the AzureRM client by authenticating to Azure using the Azure CLI, 
      # which is only supported as a user and not as a service principal. 
      - name: Set environment variables
      # Since every step runs its own shell environment, exporting variables is not
      # sufficient to extend their scope to later steps. The way to make them available
      # is to append them to the GITHUB_OUTPUT environment variable.
        run: |
          echo "export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }} \
          export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> "$GITHUB_OUTPUT"

      - run: terraform init
        working-directory: ./${{ steps.select-module.outputs.MODULE }}
      
      - run: terraform plan -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ./${{ steps.select-module.outputs.MODULE }}
      
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
