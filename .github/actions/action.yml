name: "Initialization action"
description: "Initialize Azure, Terraform and, if needed, AWS."

inputs:
  cloud-provider:
    description: "If specified, it must be either 'aws' or 'azure'"
    required: false
    type: string

  terraform-module:
    description: "Terraform module name"
    required: false
    type: string

  terraform-init-directory:
    description: "The path to the directory where Terraform must be initialized"
    required: false
    type: string
  
  azure-client-id:
    description: "Azure service principal (client id)"
    required: true
    type: string

  azure-subscription-id:
    description: "Azure subscription id"
    required: true
    type: string

  azure-tenant-id:
    description: "Azure tenant id"
    required: true
    type: string

  aws-access-key-id:
    description: "Access key id of AWS's IAM user"
    required: true
    type: string

  aws-secret-access-key:
    description: "Secret access key of AWS's IAM user"
    required: true
    type: string

  aws-arn-role:
    description: "AWS's ARN role that must be impersonated by the given user"
    required: true
    type: string

  aws-default-region:
    description: "Default AWS region where to deploy resources"
    required: true
    type: string

runs:
  using: "composite"
  steps:
      # Log into Azure regardless of the cloud provider we are provisioning on.
      # This is because the storage where we save Terraform state files is a
      # container in an Azure storage account.
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.azure-client-id }}
          subscription-id: ${{ inputs.azure-subscription-id }}
          tenant-id: ${{ inputs.azure-tenant-id }}

      # The AWS CLI is needed only when we want to apply a configuration on AWS.
      - name: Set up AWS CLI
        if: ${{ inputs.cloud-provider == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          role-to-assume: ${{ inputs.aws-arn-role }}
          aws-region: ${{ inputs.aws-default-region }}
          # The following two parameters allow to avoid runtime errors.
          role-skip-session-tagging: true
          role-duration-seconds: 900

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Inside a composite action, each 'run' step uses its own shell environment.
      # We must export Azure's subscription id as an environment variable, otherwise
      # Terraform's backend initialization would fail.
      - run: |
          export ARM_SUBSCRIPTION_ID=${{ inputs.azure-subscription-id }}
          terraform init
        if: ${{ inputs.terraform-init-directory != '' }}
        id: init-dir-specified
        shell: bash
        working-directory: ${{ inputs.terraform-init-directory }}

      - run: |
          export ARM_SUBSCRIPTION_ID=${{ inputs.azure-subscription-id }}
          terraform init
        if: ${{ steps.init-dir-specified.outcome == 'skipped' }}
        shell: bash
        working-directory: ${{ inputs.cloud-provider }}/${{ inputs.terraform-module }}