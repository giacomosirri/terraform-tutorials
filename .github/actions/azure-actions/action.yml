name: 'Initialize Azure and Terraform'
description: 'Composite action for automation of the Azure login and Terraform initialization.'

inputs:
  terraform_module:
    description: "Terraform module name"
    required: true
    type: string

  azure_client_id:
    description: "Azure service principal id (client id)"
    required: true
    type: string

  azure_subscription_id:
    description: "Azure subscription id"
    required: true
    type: string

  azure_tenant_id:
    description: "Azure tenant id"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ inputs.azure_client_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}
        tenant-id: ${{ inputs.azure_tenant_id }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Set GitHub Path
      run: echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - run: Terraform init
      shell: bash
      working-directory: azure/${{ inputs.terraform_module }}

    # Without setting the following environment variables, Terraform would try
    # to build the AzureRM client by authenticating to Azure using the Azure CLI, 
    # which is only supported as a user and not as a service principal. 
    - name: Set environment variables
      # Since every step runs its own shell environment, exporting variables is not
      # sufficient to extend their scope to later steps. The way to make them available
      # is to append them to the GITHUB_OUTPUT environment variable.
      shell: bash
      run: |
        echo "export ARM_CLIENT_ID=${{ inputs.azure_client_id }} \
        export ARM_SUBSCRIPTION_ID=${{ inputs.azure_subscription_id }} \
        export ARM_TENANT_ID=${{ inputs.azure_tenant_id }}" >> "$GITHUB_OUTPUT"
